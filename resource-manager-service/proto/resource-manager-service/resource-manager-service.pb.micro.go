// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/resource-manager-service/resource-manager-service.proto

package go_micro_service_resourcemanagerservice

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ResourceManagerService service

func NewResourceManagerServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ResourceManagerService service

type ResourceManagerService interface {
	ProvisionFileSystem(ctx context.Context, in *FileSystemSpec, opts ...client.CallOption) (*EmptyResponse, error)
	ProvisionExecutorInstance(ctx context.Context, in *ExecutorInstanceSpec, opts ...client.CallOption) (*EmptyResponse, error)
}

type resourceManagerService struct {
	c    client.Client
	name string
}

func NewResourceManagerService(name string, c client.Client) ResourceManagerService {
	return &resourceManagerService{
		c:    c,
		name: name,
	}
}

func (c *resourceManagerService) ProvisionFileSystem(ctx context.Context, in *FileSystemSpec, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "ResourceManagerService.ProvisionFileSystem", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerService) ProvisionExecutorInstance(ctx context.Context, in *ExecutorInstanceSpec, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "ResourceManagerService.ProvisionExecutorInstance", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ResourceManagerService service

type ResourceManagerServiceHandler interface {
	ProvisionFileSystem(context.Context, *FileSystemSpec, *EmptyResponse) error
	ProvisionExecutorInstance(context.Context, *ExecutorInstanceSpec, *EmptyResponse) error
}

func RegisterResourceManagerServiceHandler(s server.Server, hdlr ResourceManagerServiceHandler, opts ...server.HandlerOption) error {
	type resourceManagerService interface {
		ProvisionFileSystem(ctx context.Context, in *FileSystemSpec, out *EmptyResponse) error
		ProvisionExecutorInstance(ctx context.Context, in *ExecutorInstanceSpec, out *EmptyResponse) error
	}
	type ResourceManagerService struct {
		resourceManagerService
	}
	h := &resourceManagerServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ResourceManagerService{h}, opts...))
}

type resourceManagerServiceHandler struct {
	ResourceManagerServiceHandler
}

func (h *resourceManagerServiceHandler) ProvisionFileSystem(ctx context.Context, in *FileSystemSpec, out *EmptyResponse) error {
	return h.ResourceManagerServiceHandler.ProvisionFileSystem(ctx, in, out)
}

func (h *resourceManagerServiceHandler) ProvisionExecutorInstance(ctx context.Context, in *ExecutorInstanceSpec, out *EmptyResponse) error {
	return h.ResourceManagerServiceHandler.ProvisionExecutorInstance(ctx, in, out)
}
