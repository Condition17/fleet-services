version: '3.7'

services:
  microapi:
    image: micro/micro:v2.9.3
    command: api --handler=rpc
    ports:
      - "8080:8080"
    environment:
      MICRO_REGISTRY: "mdns"
      MICRO_API_ADDRESS: ":8080"

  microproxy:
    image: micro/micro:v2.9.3
    command: proxy
    ports:
      - "8081:8081"
    environment:
      MICRO_REGISTRY: "mdns"
      MICRO_PROXY_ADDRESS: ":8081"

  microweb:
    image: micro/micro:v2.9.3
    command: web
    ports:
      - "8082:8082"
    environment:
      MICRO_REGISTRY: "mdns"
      MICRO_WEB_ADDRESS: ":8082"

  redis:
    image: redis:latest
    command: redis-server --appendonly yes
    hostname: redis
    volumes:
      - redis-data:/data # ensures data persistence between restarting
    ports:
      - "6379:6379"

  user-service:
    restart: always
    build: ./user-service
    volumes:
      - ./keys:/keys
    links:
      - "postgres"
    depends_on:
      - "postgres"
    environment:
      ENV_NAME: "compose"
      GOOGLE_APPLICATION_CREDENTIALS: "/keys/app_user.key.json"

  test-run-service:
    restart: always
    build: ./test-run-service
    volumes:
      - ./keys:/keys
    links:
      - "postgres"
    depends_on:
      - "postgres"
    environment:
      ENV_NAME: "compose"
      GOOGLE_APPLICATION_CREDENTIALS: "/keys/app_user.key.json"

  file-service:
    restart: always
    build: ./file-service
    volumes:
      - ./keys:/keys
    links:
      - redis
    depends_on:
      - redis
    environment:
      ENV_NAME: "compose"
      GOOGLE_APPLICATION_CREDENTIALS: "/keys/app_user.key.json"

  storage-uploader-service:
    restart: always
    build: ./storage-uploader-service
    volumes:
      - ./keys:/keys
    environment:
      ENV_NAME: "compose"
      GOOGLE_APPLICATION_CREDENTIALS: "/keys/app_user.key.json"

  resource-manager-service:
    restart: always
    build: ./resource-manager-service
    volumes:
      - ./keys:/keys
    links:
      - "postgres"
    depends_on:
      - "postgres"
    environment:
      ENV_NAME: "compose"
      GOOGLE_APPLICATION_CREDENTIALS: "/keys/app_user.key.json"

  wss:
    restart: always
    build: ./wss
    volumes:
      - ./keys:/keys
    ports:
      - "3001:3001"
    depends_on:
      - "redis"
    environment:
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"
      TOKEN_SECRET: "mySuperSecretKey"
      GOOGLE_APPLICATION_CREDENTIALS: "/keys/app_user.key.json"

#  file-builder:
#    restart: always
#    build: ./file-builder
#    privileged: true
#    volumes:
#      - ./keys:/keys
#      - /var/run/docker.sock:/var/run/docker.sock
#    ports:
#      - "8090:8090"
#    environment:
#      ENV_NAME: "compose"
#      GOOGLE_APPLICATION_CREDENTIALS: "/keys/app_user.key.json"

#  river-runner:
#    restart: always
#    build: ./river-runner
#    privileged: true
#    volumes:
#      - ./keys:/keys
#      - /var/run/docker.sock:/var/run/docker.sock
#    ports:
#      - "8091:8091"
#    environment:
#      ENV_NAME: "compose"
#      GOOGLE_APPLICATION_CREDENTIALS: "/keys/app_user.key.json"

  run-controller-service:
    restart: always
    build: ./run-controller-service
    volumes:
      - ./keys:/keys
    environment:
      ENV_NAME: "compose"
      GOOGLE_APPLICATION_CREDENTIALS: "/keys/app_user.key.json"

  postgres:
    image: postgres:alpine
    volumes:
      - ./postgres-data:/var/lib/postgresql/data/ # ensures data persistence between restarting
    environment:
      POSTGRES_DB: "fleet"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "root"
    ports:
      - 5431:5432

volumes:
  redis-data: