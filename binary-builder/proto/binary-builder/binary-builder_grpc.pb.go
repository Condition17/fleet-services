// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package binarybuilder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BinaryBuilderClient is the client API for BinaryBuilder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinaryBuilderClient interface {
	// THIS IS JUST A TEST
	Hello(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
}

type binaryBuilderClient struct {
	cc grpc.ClientConnInterface
}

func NewBinaryBuilderClient(cc grpc.ClientConnInterface) BinaryBuilderClient {
	return &binaryBuilderClient{cc}
}

func (c *binaryBuilderClient) Hello(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/binarybuilder.BinaryBuilder/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BinaryBuilderServer is the server API for BinaryBuilder service.
// All implementations must embed UnimplementedBinaryBuilderServer
// for forward compatibility
type BinaryBuilderServer interface {
	// THIS IS JUST A TEST
	Hello(context.Context, *EmptyMessage) (*EmptyMessage, error)
	mustEmbedUnimplementedBinaryBuilderServer()
}

// UnimplementedBinaryBuilderServer must be embedded to have forward compatible implementations.
type UnimplementedBinaryBuilderServer struct {
}

func (UnimplementedBinaryBuilderServer) Hello(context.Context, *EmptyMessage) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedBinaryBuilderServer) mustEmbedUnimplementedBinaryBuilderServer() {}

// UnsafeBinaryBuilderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BinaryBuilderServer will
// result in compilation errors.
type UnsafeBinaryBuilderServer interface {
	mustEmbedUnimplementedBinaryBuilderServer()
}

func RegisterBinaryBuilderServer(s grpc.ServiceRegistrar, srv BinaryBuilderServer) {
	s.RegisterService(&_BinaryBuilder_serviceDesc, srv)
}

func _BinaryBuilder_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryBuilderServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binarybuilder.BinaryBuilder/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryBuilderServer).Hello(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _BinaryBuilder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "binarybuilder.BinaryBuilder",
	HandlerType: (*BinaryBuilderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _BinaryBuilder_Hello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "binary-builder.proto",
}
