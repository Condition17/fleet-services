// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package FileBuilder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// FileBuilderClient is the client API for FileBuilder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileBuilderClient interface {
	AssembleFile(ctx context.Context, in *FileAssembleRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type fileBuilderClient struct {
	cc grpc.ClientConnInterface
}

func NewFileBuilderClient(cc grpc.ClientConnInterface) FileBuilderClient {
	return &fileBuilderClient{cc}
}

func (c *fileBuilderClient) AssembleFile(ctx context.Context, in *FileAssembleRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/FileBuilder.FileBuilder/AssembleFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileBuilderServer is the server API for FileBuilder service.
// All implementations must embed UnimplementedFileBuilderServer
// for forward compatibility
type FileBuilderServer interface {
	AssembleFile(context.Context, *FileAssembleRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedFileBuilderServer()
}

// UnimplementedFileBuilderServer must be embedded to have forward compatible implementations.
type UnimplementedFileBuilderServer struct {
}

func (UnimplementedFileBuilderServer) AssembleFile(context.Context, *FileAssembleRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssembleFile not implemented")
}
func (UnimplementedFileBuilderServer) mustEmbedUnimplementedFileBuilderServer() {}

// UnsafeFileBuilderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileBuilderServer will
// result in compilation errors.
type UnsafeFileBuilderServer interface {
	mustEmbedUnimplementedFileBuilderServer()
}

func RegisterFileBuilderServer(s grpc.ServiceRegistrar, srv FileBuilderServer) {
	s.RegisterService(&_FileBuilder_serviceDesc, srv)
}

func _FileBuilder_AssembleFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileAssembleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileBuilderServer).AssembleFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileBuilder.FileBuilder/AssembleFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileBuilderServer).AssembleFile(ctx, req.(*FileAssembleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileBuilder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "FileBuilder.FileBuilder",
	HandlerType: (*FileBuilderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssembleFile",
			Handler:    _FileBuilder_AssembleFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file-builder.proto",
}
