// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/file-service/file-service.proto

package go_micro_api_fileservice

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FileService service

func NewFileServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FileService service

type FileService interface {
	CreateChunk(ctx context.Context, in *ChunkSpec, opts ...client.CallOption) (*EmptyResponse, error)
	CreateFile(ctx context.Context, in *File, opts ...client.CallOption) (*Response, error)
	ReadFile(ctx context.Context, in *File, opts ...client.CallOption) (*Response, error)
}

type fileService struct {
	c    client.Client
	name string
}

func NewFileService(name string, c client.Client) FileService {
	return &fileService{
		c:    c,
		name: name,
	}
}

func (c *fileService) CreateChunk(ctx context.Context, in *ChunkSpec, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "FileService.CreateChunk", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) CreateFile(ctx context.Context, in *File, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "FileService.CreateFile", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) ReadFile(ctx context.Context, in *File, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "FileService.ReadFile", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FileService service

type FileServiceHandler interface {
	CreateChunk(context.Context, *ChunkSpec, *EmptyResponse) error
	CreateFile(context.Context, *File, *Response) error
	ReadFile(context.Context, *File, *Response) error
}

func RegisterFileServiceHandler(s server.Server, hdlr FileServiceHandler, opts ...server.HandlerOption) error {
	type fileService interface {
		CreateChunk(ctx context.Context, in *ChunkSpec, out *EmptyResponse) error
		CreateFile(ctx context.Context, in *File, out *Response) error
		ReadFile(ctx context.Context, in *File, out *Response) error
	}
	type FileService struct {
		fileService
	}
	h := &fileServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FileService{h}, opts...))
}

type fileServiceHandler struct {
	FileServiceHandler
}

func (h *fileServiceHandler) CreateChunk(ctx context.Context, in *ChunkSpec, out *EmptyResponse) error {
	return h.FileServiceHandler.CreateChunk(ctx, in, out)
}

func (h *fileServiceHandler) CreateFile(ctx context.Context, in *File, out *Response) error {
	return h.FileServiceHandler.CreateFile(ctx, in, out)
}

func (h *fileServiceHandler) ReadFile(ctx context.Context, in *File, out *Response) error {
	return h.FileServiceHandler.ReadFile(ctx, in, out)
}
