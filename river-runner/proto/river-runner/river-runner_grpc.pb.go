// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package RiverRunner

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RiverRunnerClient is the client API for RiverRunner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RiverRunnerClient interface {
	RunRiver(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type riverRunnerClient struct {
	cc grpc.ClientConnInterface
}

func NewRiverRunnerClient(cc grpc.ClientConnInterface) RiverRunnerClient {
	return &riverRunnerClient{cc}
}

func (c *riverRunnerClient) RunRiver(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/RiverRunner.RiverRunner/RunRiver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RiverRunnerServer is the server API for RiverRunner service.
// All implementations must embed UnimplementedRiverRunnerServer
// for forward compatibility
type RiverRunnerServer interface {
	RunRiver(context.Context, *RunRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedRiverRunnerServer()
}

// UnimplementedRiverRunnerServer must be embedded to have forward compatible implementations.
type UnimplementedRiverRunnerServer struct {
}

func (UnimplementedRiverRunnerServer) RunRiver(context.Context, *RunRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunRiver not implemented")
}
func (UnimplementedRiverRunnerServer) mustEmbedUnimplementedRiverRunnerServer() {}

// UnsafeRiverRunnerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RiverRunnerServer will
// result in compilation errors.
type UnsafeRiverRunnerServer interface {
	mustEmbedUnimplementedRiverRunnerServer()
}

func RegisterRiverRunnerServer(s grpc.ServiceRegistrar, srv RiverRunnerServer) {
	s.RegisterService(&_RiverRunner_serviceDesc, srv)
}

func _RiverRunner_RunRiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiverRunnerServer).RunRiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RiverRunner.RiverRunner/RunRiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiverRunnerServer).RunRiver(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RiverRunner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RiverRunner.RiverRunner",
	HandlerType: (*RiverRunnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunRiver",
			Handler:    _RiverRunner_RunRiver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "river-runner.proto",
}
